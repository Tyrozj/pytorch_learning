
import torch
import torchvision.datasets
from torch import nn
from torch.nn import ReLU, Sigmoid
from torch.utils.data import DataLoader
from torch.utils.tensorboard import SummaryWriter

input = torch.tensor([[1, -0.5],
                     [-1, 3]])
input = torch.reshape(input, (-1, 1, 2, 2))
# size设置为-1，batch_size自行计算，维度为1，矩阵为2×2的
print(input.shape)

dataset = torchvision.datasets.CIFAR10("./dataset", train=False, download=True,
                                       transform=torchvision.transforms.ToTensor())

dataloader = DataLoader(dataset, batch_size=64)

class Tzj(nn.Module):
    def __init__(self): # 初始化
        super(Tzj, self).__init__()# 父类
        self.relu1 = ReLU()
        # ReLU中的inplace中的True表示经过方法后改变原来的值，False表示不改变原来的值，新的值赋给输出
        self.sigmoid1 = Sigmoid()

    def forward(self, input):
        output = self.sigmoid1(input)
        return output

tzj = Tzj()

step = 0
writer = SummaryWriter("logs_relu")
for data in dataloader:
    imgs, targets = data
    writer.add_images("input", imgs, global_step=step)
    output = tzj(imgs)
    writer.add_images("output", output, step)
    step += 1

writer.close()
