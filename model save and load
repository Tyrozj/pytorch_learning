model_save.py
import torch
import torchvision.models
from torch import nn

vgg16 = torchvision.models.vgg16(pretrained=False)
#保存方式1
torch.save(vgg16, "vgg16_method1.pth")
#Can save the model and its parameters.
#保存方式2
torch.save(vgg16.state_dict(), "vgg16_method2.pth")
#Only save model's parameters.

# 陷阱
class Tzj(nn.Module):
    def __init__(self):
        super(Tzj, self).__init__()
        self.conv1 = nn.Conv2d(3, 64, kernel_size=3)

    def forward(self, x):
        x = self.conv1(x)
        return x

tzj = Tzj()
torch.save(tzj, "tzj_method.pth")

model_load.py
import torch
import torchvision.models
from torch import nn
from model_save import *
#将model_save中的定义的模型全部引入过来
model = torch.load("vgg16_method1.pth")
#load the saved model.toward the save way 1.
print(model)

vgg16 = torchvision.models.vgg16(pretrained=False)
vgg16.load_state_dict(torch.load("vgg16_method2.pth"))
#字典形式
# model = torch.load("vgg16_method2.pth")
print(vgg16)
#Save as dirction form.

#陷阱
class Tzj(nn.Module):
    def __init__(self):
        super(Tzj, self).__init__()
        self.conv1 = nn.Conv2d(3, 64, kernel_size=3)

    def forward(self, x):
        x = self.conv1(x)
        return x
model = torch.load('tzj_method.pth')
print(model)
